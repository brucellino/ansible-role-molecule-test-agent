def slackResponse = slackSend(
    channel: "#devops-ansible-roles",
    message: "Ansible role molecule test agent build ${BUILD_NUMBER} started ",
    tokenCredentialId: 'slack_bot_token')

pipeline {
  options {
    checkoutToSubdirectory 'ansible-role-molecule-test-agent'
  }
  agent none
  environment {
    AWS_REGION='eu-central-1'
  }
  stages {
    stage('Test') {
      when {
        changeRequest()
        beforeAgent true
      }
      parallel {
        stage('EC2') {
          agent { label 'molecule-ecs' }
          steps {
            slackSend channel: slackResponse.threadId,
                      message: "Testing EC2 scenario  (<${env.BUILD_URL}|Open>)",
                      tokenCredentialId: 'slack_bot_token'
            echo 'Test EC2 scenario'
            withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',
              credentialsId: 'aws_infra_credential',
              accessKeyVariable: 'AWS_ACCESS_KEY_ID',
              secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
              dir('ansible-role-molecule-test-agent') {
                sh '''
. /opt/virtualenv/molecule/bin/activate
molecule lint -s ec2
molecule create -s ec2
molecule converge -s ec2
molecule verify -s ec2
                  '''
              } // dir
            } // credentials
          } // steps
          post {
            always {
              dir('ansible-role-molecule-test-agent') {
                sh "molecule destroy -s ec2"
                junit 'molecule/ec2/*.xml'
              } // dir
            } // always post
            success {
              slackSend(
                channel: slackResponse.threadId,
                message: "EC2 scenario passed  (<${env.BUILD_URL}|Open>)",
                tokenCredentialId: 'slack_bot_token')
            }
            failure {
              slackSend(
                channel: slackResponse.threadId,
                message: "EC2 scenario failed  (<${env.BUILD_URL}|Open>)",
                tokenCredentialId: 'slack_bot_token')
            }
          } // post
        } // stage
        stage('Docker') {
          agent { label 'image-test-harness' }
          steps {
            slackSend(
              channel: slackResponse.threadId,
              message: "Testing Docker scenario  (<${env.BUILD_URL}|Open>)",
              tokenCredentialId: 'slack_bot_token')
            dir('ansible-role-molecule-test-agent') {
              sh '''
  . /opt/virtualenv/molecule/bin/activate
  molecule lint
  molecule converge
  molecule verify
              '''
              } // dir
            } // steps
            post {
              always {
                dir('ansible-role-molecule-test-agent') {
                  junit 'molecule/default/*.xml'
                  sh '''
  . /opt/virtualenv/molecule/bin/activate
  molecule destroy
                    '''
                } // dir
              } // always post
              success {
                slackSend(
                  channel: slackResponse.threadId,
                  message: "Docker scenario passed  (<${env.BUILD_URL}|Open>)",
                  tokenCredentialId: 'slack_bot_token')
              }
              failure {
                slackSend(
                  channel: slackResponse.threadId,
                  message: "Docker scenario failed  (<${env.BUILD_URL}|Open>)",
                  tokenCredentialId: 'slack_bot_token')
              }
            } // post
        } // stage
        stage('Bootstrap') {
          agent { label 'ec2-bionic' }
          steps {
            slackSend(
              channel: slackResponse.threadId,
              message: "Testing Docker scenario  (<${env.BUILD_URL}|Open>)",
              tokenCredentialId: 'slack_bot_token')
            dir('ansible-role-molecule-test-agent') {
              sh 'which pip'
              sh 'which pip3'
              sh 'which virtualenv'
              } // dir
            } // steps
            post {
              always {
                echo 'INFO: Always executed post actions'
              } // always post
              success {
                slackSend(
                  channel: slackResponse.threadId,
                  message: "Bootstrap scenario passed  (<${env.BUILD_URL}|Open>)",
                  tokenCredentialId: 'slack_bot_token')
              }
              failure {
                slackSend(
                  channel: slackResponse.threadId,
                  message: "Bootstrap scenario failed  (<${env.BUILD_URL}|Open>)",
                  tokenCredentialId: 'slack_bot_token')
              }
            } // post
          } // stage
      } // parallel test stage
    } // Test stage
    stage('Bake') {
      when {
        branch 'master'
        beforeAgent true
      }
      agent { label 'ec2-bionic' }
      steps {
        slackSend channel: slackResponse.threadId,
                  message: "Starting bake",
                  tokenCredentialId: 'slack_bot_token'
        dir('ansible-role-molecule-test-agent/.pipeline') {
          withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'aws_infra_credential',
            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
          usernamePassword(
            credentialsId: 'uefadevops+quaybot',
            usernameVariable: 'QUAY_USERNAME',
            passwordVariable: 'QUAY_PASSWORD' )]) {
            sh '''
packer validate .pipeline/packer.json
packer build packer.json
docker login -u="${QUAY_USERNAME}" -p="${QUAY_PASSWORD}" quay.io
docker push quay.io/uefadevops/molecule-build-agent
docker logout
              '''
          } // credentials
        } // dir
      } // steps
    } // bake stage
  } // stages
  post {
    success {
      slackSend channel: slackResponse.threadId,
                message: "Molecule build agent artifacts created  (<${env.BUILD_URL}|Open>)",
                tokenCredentialId: 'slack_bot_token',
                color: 'good'
    }
    failure {
      slackSend channel: slackResponse.threadId,
                message: "Molecule build agent pipeline failed  (<${env.BUILD_URL}|Open>)",
                tokenCredentialId: 'slack_bot_token',
                color: 'danger'
    }
  } // post
} // pipeline
