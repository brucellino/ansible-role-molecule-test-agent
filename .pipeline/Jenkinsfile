pipeline {
  options {
    checkoutToSubdirectory 'ansible-role-molecule-test-agent'
  }
  agent none
  environment {
    AWS_REGION='eu-central-1'
  }
  stages {
    stage('Test') {
      when {
        changeRequest()
        beforeAgent true
      }
      parallel {
        stage('EC2') {
          agent { label 'molecule-ecs' }
          steps {
            sh 'ls -la'
            sh 'pwd'
            echo 'Lint stage'
            withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',
              accessKeyVariable: 'AWS_ACCESS_KEY_ID',
              credentialsId: 'aws_sandbox_credentials_jenkins',
              secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            dir('ansible-role-molecule-test-agent') {
              sh '''
. /opt/virtualenv/molecule/bin/activate
python --version
which python3
which python2
molecule lint -s ec2
molecule --debug converge -s ec2
molecule verify -s ec2
              '''
            }// dir
            dir('ansible-role-molecule-test-agent/.pipeline') {
              sh '''
. /opt/virtualenv/molecule/bin/activate
packer validate .pipeline/packer.json
                  '''
            }
          } // credentials
        } // steps
        post {
          always {
            dir('ansible-role-molecule-test-agent') {
              junit 'molecule/ec2/*.xml'
              sh '''
molecule destroy -s ec2
                '''
            } // dir
          } // always post
        } // post
      } // stage
      stage('Docker') {
        agent { label 'ec2-bionic' }
        steps {
          dir('ansible-role-molecule-test-agent') {
            sh '''
sudo pip install "ansible==2.9.2" "testinfra==3.1.0" "molecule==2.22"
molecule lint
molecule converge
molecule verify
            '''
            } // dir
          } // steps
          post {
            always {
              dir('ansible-role-molecule-test-agent') {
                junit 'molecule/default/*.xml'
                sh '''
molecule destroy
                  '''
              } // dir
            } // always post
          } // post
        } // stage
      } // parallel test stage
    } // Test stage
    stage('Bake') {
      when {
        branch 'master'
        beforeAgent true
      }
      agent { label 'ec2-bionic' }
      steps {
        dir('ansible-role-molecule-test-agent/.pipeline') {
          sh 'ls'
          sh 'pwd'
          withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'aws_infra_credential',
            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
          usernamePassword(
            credentialsId: 'uefadevops+quaybot',
            usernameVariable: 'QUAY_USERNAME',
            passwordVariable: 'QUAY_PASSWORD' )]) {
            sh '''
packer build packer.json
docker login -u="${QUAY_USERNAME}" -p="${QUAY_PASSWORD}" quay.io
docker push quay.io/uefadevops/molecule-build-agent
docker logout
              '''
          } // credentials
        } // dir
      } // steps
    } // bake stage
  } // stages
} // pipeline
